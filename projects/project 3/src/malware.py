import json
import getpass
import uuid
import re
import platform
import socket
import psutil


HOST = "127.0.0.1"  # Localhost
PORT = 62412        # A random non-priveleged port


def get_os():
    """ Returns the type of operating system the user is running """
    return platform.uname().system

def get_processors():
    """ Returns the number of processors the user has """
    return platform.uname().processor

def get_hostname():
    """ Returns the hostname of the user """
    return platform.uname().node

def get_ip():
    """ Returns the IP address of the user """
    return socket.gethostbyname(socket.gethostname())

def get_mac():
    """ Returns the MAC address of the user """
    return ':'.join(re.findall('..', '%012x' % uuid.getnode()))

def get_username():
    """ Returns the username of the user """
    return getpass.getuser()

def get_ram():
    """ Returns the amount of RAM the user has """
    return str(round(psutil.virtual_memory().total / (1024.0 **3)))+" GB"

def get_architecture():
    """ Returns the architecture of the user """
    return platform.uname().machine

def get_disk():
    """ Returns the amount of disk space the user has """
    return str(round(psutil.disk_usage('/').total / (1024.0 **3)))+" GB"

def get_platform_version():
    """ Returns the version of the operating system the user is running """
    return platform.uname().version

data = {
    "os": get_os(),
    "processors": get_processors(),
    "hostname": get_hostname(),
    "ip": get_ip(),
    "mac": get_mac(),
    "username": get_username(),
    "ram": get_ram(),
    "architecture": get_architecture(),
    "disk": get_disk(),
    "platform_version": get_platform_version()
}

def serialize(data: dict) -> bytes:
    """ Serializes a dictionary into a JSON string """
    return json.dumps(data).encode('utf-8')

def deserialize(data: bytes) -> dict:
    """ Deserializes a JSON string into a dictionary """
    return json.loads(data.decode('utf-8'))


with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT)) # Connect to the server

    while True:
        command = s.recv(1024).decode()
        if not command:
            break

        if command == "sysinfo":
            s.sendall(serialize(data))  # Send system information to the server
        elif command == "exit":
            break                       # Terminate the connection